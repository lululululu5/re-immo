"""Create database for building and user

Revision ID: fede56ed5866
Revises: 
Create Date: 2024-07-07 10:21:17.652843

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'fede56ed5866'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=128), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.Column('user_type', sa.Enum('general', 'partner', 'admin', name='usertypes'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_name'), ['name'], unique=False)

    op.create_table('buildings',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('address', sa.String(length=128), nullable=False),
    sa.Column('reporting_year', sa.Integer(), nullable=False),
    sa.Column('country', sa.String(length=64), nullable=False),
    sa.Column('zip', sa.String(length=16), nullable=False),
    sa.Column('property_type', sa.Enum('residential_single_family', 'residential_multi_family', name='propertytypes'), nullable=False),
    sa.Column('size', sa.Float(), nullable=False),
    sa.Column('grid_elec', sa.Float(), nullable=True),
    sa.Column('natural_gas', sa.Float(), nullable=True),
    sa.Column('fuel_oil', sa.Float(), nullable=True),
    sa.Column('dist_heating', sa.Float(), nullable=True),
    sa.Column('dist_cooling', sa.Float(), nullable=True),
    sa.Column('o1_energy_type', sa.Enum('biogas', 'wood_chips', 'wood_pellets', 'coal', 'landfill_gas', 'lpgs', name='energytypes'), nullable=True),
    sa.Column('o1_consumption', sa.Float(), nullable=True),
    sa.Column('o2_energy_type', sa.Enum('biogas', 'wood_chips', 'wood_pellets', 'coal', 'landfill_gas', 'lpgs', name='energytypes'), nullable=True),
    sa.Column('o2_consumption', sa.Float(), nullable=True),
    sa.Column('f_gas_1_type', sa.Enum('CARBON_DIOXIDE_CO2', 'METHANE_CH4', 'NITROUS_OXIDE_N2O', 'R_11', 'CFC_11', 'TRICHLOROFLUOROMETHANE_CCI3F', 'R_12', 'CFC_12', 'DICHLOROFLUOROMETHANE_CCI2F2', 'R_13', 'CFC_13', 'CHLORODIFLUOROMETHANE_CCIF3', 'R_113', 'CFC_113', 'TRICHLOROTRIFLUOROETHANE_C2CI3F3', 'R_114', 'CFC_114', 'HALON_242', 'DICHLOROTETRAFLUOROETHANE_C2Cl2F4', 'R_115', 'CFC_115', 'CHLOROPENTAFLUOROETHANE_C2ClF5', 'R13_B1', 'HALON_1301', 'BROMOTRIFLUOROMETHANE_CBrF3', 'R_12B1', 'HALON_1211', 'BROMOCHLORODIFLUOROMETHANE_CBrCIF2', 'R_114B2', 'HALON_2402', 'DIBROMOTETRAFLUOROETHANE_C2Br2F4', 'R_10', 'CARBON_TETRACHLORIDE_CCl4', 'BROMOMETHANE', 'METHYL_BROMIDE_CH3Br', 'R_140a', 'TRICHLOROETHANE', 'METHYL_CHLOROFORM_C2H3Cl3', 'R_21', 'HCFC_21', 'DICHLOROFLUOROMETHANE_CHCl2F', 'R_22', 'HCFC_22', 'CHLORODIFLUOROMETHANE_CHClF2', 'R_123', 'HCFC_123', 'DICHLOROTRIFLUOROETHANE_C2Cl2F3', 'R_124', 'HCFC_124', 'TETRAFLUOROETHANE_C2ClF4', 'R_141b', 'HCFC_141b', 'DICHLOROFLUOROETHANE_C2H3Cl2F', 'R_142b', 'HCFC_142b', 'DICHLORODIFLUOROETHANE_C2ClF2', 'R_225ca', 'HCFC_225ca', 'DICHLOROPENTAFLUOROPROPANE_C3HCl2F5', 'R_225cb', 'HCFC_225cb', 'PENTAFLUOROPROPANE_C3HCl2F5', 'R_23', 'HFC_23', 'R_32', 'HFC_32', 'R_41', 'HFC_41', 'R_125', 'HFC_125', 'R_134', 'HFC_134', 'R_134a', 'HFC_134a', 'R_143', 'HFC_143', 'R_143a', 'HFC_143a', 'R_152', 'HFC_152', 'R_152a', 'HFC_152a', 'R_161', 'HFC_161', 'R_227ea', 'HFC_227ea', 'R_236cb', 'HFC_236cb', 'R_404A', 'R_407C', 'R_410A', 'R_422D', 'R_448A', 'R_449A', 'SULFUR_HEXAFLUORIDE_SF6', 'NITROGEN_TRIFLUORIDE_NF3', name='fgastypes'), nullable=True),
    sa.Column('f_gas_1_amount', sa.Float(), nullable=True),
    sa.Column('f_gas_2_type', sa.Enum('CARBON_DIOXIDE_CO2', 'METHANE_CH4', 'NITROUS_OXIDE_N2O', 'R_11', 'CFC_11', 'TRICHLOROFLUOROMETHANE_CCI3F', 'R_12', 'CFC_12', 'DICHLOROFLUOROMETHANE_CCI2F2', 'R_13', 'CFC_13', 'CHLORODIFLUOROMETHANE_CCIF3', 'R_113', 'CFC_113', 'TRICHLOROTRIFLUOROETHANE_C2CI3F3', 'R_114', 'CFC_114', 'HALON_242', 'DICHLOROTETRAFLUOROETHANE_C2Cl2F4', 'R_115', 'CFC_115', 'CHLOROPENTAFLUOROETHANE_C2ClF5', 'R13_B1', 'HALON_1301', 'BROMOTRIFLUOROMETHANE_CBrF3', 'R_12B1', 'HALON_1211', 'BROMOCHLORODIFLUOROMETHANE_CBrCIF2', 'R_114B2', 'HALON_2402', 'DIBROMOTETRAFLUOROETHANE_C2Br2F4', 'R_10', 'CARBON_TETRACHLORIDE_CCl4', 'BROMOMETHANE', 'METHYL_BROMIDE_CH3Br', 'R_140a', 'TRICHLOROETHANE', 'METHYL_CHLOROFORM_C2H3Cl3', 'R_21', 'HCFC_21', 'DICHLOROFLUOROMETHANE_CHCl2F', 'R_22', 'HCFC_22', 'CHLORODIFLUOROMETHANE_CHClF2', 'R_123', 'HCFC_123', 'DICHLOROTRIFLUOROETHANE_C2Cl2F3', 'R_124', 'HCFC_124', 'TETRAFLUOROETHANE_C2ClF4', 'R_141b', 'HCFC_141b', 'DICHLOROFLUOROETHANE_C2H3Cl2F', 'R_142b', 'HCFC_142b', 'DICHLORODIFLUOROETHANE_C2ClF2', 'R_225ca', 'HCFC_225ca', 'DICHLOROPENTAFLUOROPROPANE_C3HCl2F5', 'R_225cb', 'HCFC_225cb', 'PENTAFLUOROPROPANE_C3HCl2F5', 'R_23', 'HFC_23', 'R_32', 'HFC_32', 'R_41', 'HFC_41', 'R_125', 'HFC_125', 'R_134', 'HFC_134', 'R_134a', 'HFC_134a', 'R_143', 'HFC_143', 'R_143a', 'HFC_143a', 'R_152', 'HFC_152', 'R_152a', 'HFC_152a', 'R_161', 'HFC_161', 'R_227ea', 'HFC_227ea', 'R_236cb', 'HFC_236cb', 'R_404A', 'R_407C', 'R_410A', 'R_422D', 'R_448A', 'R_449A', 'SULFUR_HEXAFLUORIDE_SF6', 'NITROGEN_TRIFLUORIDE_NF3', name='fgastypes'), nullable=True),
    sa.Column('f_gas_2_amount', sa.Float(), nullable=True),
    sa.Column('pv_wind_consumed', sa.Float(), nullable=True),
    sa.Column('pv_wind_exported', sa.Float(), nullable=True),
    sa.Column('hp_solar_consumed', sa.Float(), nullable=True),
    sa.Column('hp_solar_exported', sa.Float(), nullable=True),
    sa.Column('off_site_renewables', sa.Float(), nullable=True),
    sa.Column('retrofit_year', sa.Integer(), nullable=True),
    sa.Column('retrofit_investment', sa.Float(), nullable=True),
    sa.Column('user_id', sa.String(length=64), nullable=False),
    sa.CheckConstraint('dist_cooling >= 0', name='check_dist_cooling_non_negative'),
    sa.CheckConstraint('dist_heating >= 0', name='check_dist_heating_non_negative'),
    sa.CheckConstraint('f_gas_1_amount >= 0', name='check_f_gas_1_amount_non_negative'),
    sa.CheckConstraint('f_gas_2_amount >= 0', name='check_f_gas_2_amount_non_negative'),
    sa.CheckConstraint('fuel_oil >= 0', name='check_fuel_oil_non_negative'),
    sa.CheckConstraint('grid_elec >= 0', name='check_grid_elec_non_negative'),
    sa.CheckConstraint('hp_solar_consumed >= 0', name='check_hp_solar_consumed_non_negative'),
    sa.CheckConstraint('hp_solar_exported >= 0', name='check_hp_solar_exported_non_negative'),
    sa.CheckConstraint('natural_gas >= 0', name='check_natural_gas_non_negative'),
    sa.CheckConstraint('o1_consumption >= 0', name='check_o1_consumption_non_negative'),
    sa.CheckConstraint('o2_consumption >= 0', name='check_o2_consumption_non_negative'),
    sa.CheckConstraint('off_site_renewables >= 0', name='check_off_site_renewables_non_negative'),
    sa.CheckConstraint('pv_wind_consumed >= 0', name='check_pv_wind_consumed_non_negative'),
    sa.CheckConstraint('pv_wind_exported >= 0', name='check_pv_wind_exported_non_negative'),
    sa.CheckConstraint('retrofit_investment >= 0', name='check_retrofit_investment_non_negative'),
    sa.CheckConstraint('size >= 0', name='check_size_non_negative'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('buildings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_buildings_address'), ['address'], unique=False)
        batch_op.create_index(batch_op.f('ix_buildings_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('buildings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_buildings_user_id'))
        batch_op.drop_index(batch_op.f('ix_buildings_address'))

    op.drop_table('buildings')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_name'))
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###
